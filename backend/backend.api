syntax = "v1"

type PaginateReq {
	Page int `json:"page"`
	Size int `json:"size"`
}

type (
	LoginReq {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	LoginResp {
		Token string   `json:"token"`
		Menus []string `json:"menus"`
	}
)

type (
	ManagerListReq {
		PaginateReq
	}
	ManagerListResp  {}
	ManagerAddReq  {}
	ManagerAddResp  {}
	ManagerUpdateReq  {}
	ManagerUpdateResp  {}
	ManagerDeleteReq  {}
	ManagerDeleteResp  {}
)

type (
	RoleListReq  {}
	RoleListResp  {}
	RoleAddReq  {}
	RoleAddResp  {}
	RoleUpdateReq  {}
	RoleUpdateResp  {}
	RoleDeleteReq  {}
	RoleDeleteResp  {}
)

@server (
	group: auth
)
service backend-api {
	@handler Login
	post /login (LoginReq) returns (LoginResp)
}

@server (
	group:      system/managers
	jwt:        Auth
	middleware: CorsMiddleware
)
service backend-api {
	@handler ManagerList
	get /manager/list (ManagerListReq) returns (ManagerListResp)

	@handler ManagerAdd
	get /Manager/add (ManagerAddReq) returns (ManagerAddResp)

	@handler ManagerUpdate
	get /Manager/update (ManagerUpdateReq) returns (ManagerUpdateResp)

	@handler ManagerDelete
	get /Manager/delete (ManagerDeleteReq) returns (ManagerDeleteResp)
}

@server (
	group:      system/roles
	jwt:        Auth
	middleware: CorsMiddleware
)
service backend-api {
	@handler RoleList
	get /role/list (RoleListReq) returns (RoleAddResp)

	@handler RoleAdd
	get /role/add (RoleAddReq) returns (RoleAddResp)

	@handler RoleUpdate
	get /role/update (RoleUpdateReq) returns (RoleUpdateResp)

	@handler RoleDelete
	get /role/delete (RoleDeleteReq) returns (RoleDeleteResp)
}

